# Imagine we have an image. Weâ€™ll represent this image as a simple 2D array where every pixel is a 1 or a 0. The image you get is known to have a single rectangle of 0s on a background of 1s. Write a function that takes in the image and returns the coordinates of the rectangle -- either top-left and bottom-right; or top-left, width, and height.

# The image you get is known to have N rectangles of 0's on a background of 1's. Write a function that takes in the image and outputs the coordinates of all the 0 rectangles.

# arr of hashes, one hash for rectangle
# track number rectangle
# which will tell us which rectangle to update
# add to hash, end of first line of rectangle
# move to next arr, if encouner 0
# For example:

var image = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 1, 1, 1, 1, 1, 1],
  [1, 1, 1, 0, 0, 0, 1],
  [1, 0, 1, 0, 0, 0, 1],
  [1, 0, 1, 1, 1, 1, 1],
  [1, 0, 1, 0, 0, 1, 1],
  [1, 1, 1, 0, 0, 1, 1],
  [1, 1, 1, 1, 1, 1, 1],
];


image = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 1, 1, 1, 1, 1, 1],
  [1, 1, 1, 0, 0, 0, 1],
  [1, 1, 1, 0, 0, 0, 1],
  [1, 1, 1, 1, 1, 1, 1],
];

image2 = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 1, 1, 0, 0, 1, 1],
  [1, 1, 1, 0, 0, 1, 1],
  [1, 1, 1, 0, 0, 1, 1],
  [1, 1, 1, 1, 1, 1, 1],
];
# 1,3
# 3,5

image3 = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 1, 1, 1, 1, 0, 0],
  [1, 1, 1, 1, 1, 0, 0],
  [1, 1, 1, 1, 1, 0, 0],
  [1, 1, 1, 1, 1, 0, 0],
];
# 1,5
# 3,6

# iterate over 2-d array and find first 0
# top_left - store coordinates
#   height: 1
# if value != 1
#   increment the width
# in next array has 0 at same 2nd coordinate
#   increase height by 1

# tests
# check input type
# rotate image and test code

def rectangleLocation(input)
  locations = {}
  input.each_with_index do |arr, i|
    arr.each_with_index do |item, k|
      if (item == 0 && !locations[:top_left])
        locations[:top_left] = [i, k]
      elsif (item == 0 && arr[k] != arr[k+1])
        arr[k] != arr[k+1]
        locations[:bottom_right] = [i, k]
      end
    end
  end
  locations
end

puts rectangleLocation(image3)

