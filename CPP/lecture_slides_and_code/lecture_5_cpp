- https://see.stanford.edu/Course/CS106B
- https://see.stanford.edu/materials/icspacs106b/Lecture05.pdf
- https://web.stanford.edu/class/archive/cs/cs106b/cs106b.1172//handouts/overview.html
- https://web.stanford.edu/class/archive/cs/cs106b/cs106b.1172/lectures/4-Vectors_Grid/4-VectorsGrids.pdf

- standford source code:
  - https://web.stanford.edu/class/archive/cs/cs106b/cs106b.1172/lectures/5-Stacks_Queues/code/
- youtube:
  - https://www.youtube.com/watch?v=XHXEn6kxtdQ&index=5&list=PLFE6E58F856038C69

lecture_5_cpp
Importance of structures: tells ppl the intention of your code. prevents you from making mistakes in your code

Vector
- unlike an array, you only have to call the "add" member function to add elements.
- Templates are type safe. You can have a Vector of strings. Any functions on a Vector will return the type that the Vector contains (eg int, string, char).
- useful for the various accessors and ability to grow and shrink

Grid
- game board
- images
- matrices
- tables

Stack
- useful for,
- reversing a sequence (eg reverse a string)
- managing a series of undoable actions
- tracking history when web browsing
- lifo - last in, first out
- push, pop

Queue
- modeling a waiting line
- storing user keystrokes
- ordering jobs for a printer (first come first served)
- implementing breadth-first search
- fifo - first in, first out
- enqueue, dequeue, peek (who is at the head of the line, wiout removing it), size, isEmpty

Nested templates,
- Queue can hold stacks or vectors
  - Vector<Queue<string> > checkoutlines;
  - Grid<Stack<string> > game;
    - board game grid that stacks letters on individual squares

Type shorthand
- long name followed by short name
- Ex: typedef Vector<Vector<int> > calendarT;
  - assume you are making a calendar and want to enter Vector ints many times. now you can call it "calendarT" instead


